{"version":3,"file":"static/js/170.56c7a49d.chunk.js","mappings":"qTAIaA,EAAgBC,EAAAA,GAAAA,IAAH,iHAObC,EAAQD,EAAAA,GAAAA,KAAH,uFAMLE,EAAaF,EAAAA,GAAAA,KAAH,6CAIVG,GAAgBH,EAAAA,EAAAA,IAAOI,EAAAA,IAAPJ,CAAH,kEAKbK,GAAWL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,oNAaRO,EAAQP,EAAAA,GAAAA,IAAH,4DAKLQ,EAAUR,EAAAA,GAAAA,IAAH,mFAMPS,EAAWT,EAAAA,GAAAA,GAAH,iHAORU,GAAaV,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAH,2W,SC2CvB,EAhFqB,WAAO,IAAD,IACzB,GAAwCY,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MASjB,IAPAC,EAAAA,EAAAA,YAAU,WACRL,GAAW,IACXM,EAAAA,EAAAA,IAAgBL,EAAOM,SACpBC,KAAKV,GACLW,SAAQ,kBAAMT,GAAW,QAC3B,CAACC,KAECJ,EACH,OAAO,8BAAGE,IAAW,SAACW,EAAA,EAAD,MAGvB,IAAQC,EACNd,EADMc,YAAaC,EACnBf,EADmBe,MAAOC,EAC1BhB,EAD0BgB,aAAcC,EACxCjB,EADwCiB,aAAcC,EACtDlB,EADsDkB,SAAUC,EAChEnB,EADgEmB,OAG5DC,EAASN,EAAW,UAtBL,kCAsBK,YAAwBA,GAAgBO,EAC5DC,EAAcN,EAAaO,MAAM,EAAG,GACpCC,EAAcC,KAAKC,MAAqB,GAAfT,GACzBU,EAAYR,EAAOS,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAMC,KAAK,KACjDC,EAAQ,oBAAG1B,EAAS2B,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAEzC,OACE,UAACC,EAAA,EAAD,YACE,UAAC3C,EAAD,CAAU4C,GAAIJ,EAAd,WACE,SAAC1C,EAAD,IADF,cAIA,UAACJ,EAAD,YACE,SAACQ,EAAD,WACE,gBAAK2C,IAAKjB,EAAQkB,IAAKvB,EAAOwB,MAAM,WAEtC,UAAC5C,EAAD,WACGoB,IACC,0BACGA,EADH,KACYO,EADZ,OAIDE,IACC,0BACE,SAACnC,EAAD,0BADF,IACwCmC,EADxC,OAKDN,IACC,0BACE,SAAC9B,EAAD,uBACC8B,KAIJS,IACC,0BACE,SAACvC,EAAD,qBACCuC,YAKT,UAAC/B,EAAD,YACE,yBACE,SAACC,EAAD,CAAYuC,GAAG,OAAOH,MAAO,CAAEC,KAAMF,GAArC,qBAIF,yBACE,SAACnC,EAAD,CAAYuC,GAAG,UAAUH,MAAO,CAAEC,KAAMF,GAAxC,2BAKJ,SAAC,KAAD,S","sources":["components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link, NavLink } from 'react-router-dom';\nimport { CgArrowLeftR } from 'react-icons/cg';\n\nexport const DetailWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  padding: 16px 0;\n  border-bottom: 2px solid #006dba;\n`;\n\nexport const Label = styled.span`\n  font-weight: 700;\n  display: block;\n  margin-bottom: 8px;\n`;\n\nexport const ScoreLabel = styled.span`\n  font-weight: 700;\n`;\n\nexport const IconArrowLeft = styled(CgArrowLeftR)`\n  font-size: 20px;\n  margin-right: 6px;\n`;\n\nexport const BackLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  text-transform: uppercase;\n  color: #000000;\n  transition: color 200ms linear;\n\n  &:hover {\n    color: #006dba;\n  }\n`;\n\nexport const Thumb = styled.div`\n  width: 300px;\n  flex-shrink: 0;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 26px;\n`;\n\nexport const LinkList = styled.ul`\n  display: flex;\n  padding: 16px 0;\n  gap: 16px;\n  border-bottom: 2px solid #006dba;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  display: block;\n  padding: 4px 8px;\n  font-size: 16px;\n  font-weight: 500;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: #000000;\n  transition: color 200ms linear;\n\n  &:hover:not(.active) {\n    color: #006dba;\n  }\n\n  &.active {\n    color: #ffffff;\n    background: #006dba;\n    border-radius: 10px;\n  }\n`;\n","import Container from 'components/Container/Container';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from 'services/api';\nimport noPoster from '../../images/img-default.jpg';\nimport {\n  BackLink,\n  Content,\n  DetailWrapper,\n  IconArrowLeft,\n  Label,\n  LinkList,\n  ScoreLabel,\n  StyledLink,\n  Thumb,\n} from './MovieDetails.styled';\n\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w780';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const params = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    setLoading(true);\n    getMovieDetails(params.movieId)\n      .then(setMovieDetails)\n      .finally(() => setLoading(false));\n  }, [params]);\n\n  if (!movieDetails) {\n    return <>{loading && <Loader />}</>;\n  }\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieDetails;\n\n  const imgUrl = poster_path ? `${IMAGE_BASE_URL}/${poster_path}` : noPoster;\n  const releaseDate = release_date.slice(0, 4);\n  const voteAverage = Math.floor(vote_average * 10);\n  const genresStr = genres.map(genre => genre.name).join(' ');\n  const backLink = location.state?.from ?? '/movies';\n\n  return (\n    <Container>\n      <BackLink to={backLink}>\n        <IconArrowLeft />\n        Go back\n      </BackLink>\n      <DetailWrapper>\n        <Thumb>\n          <img src={imgUrl} alt={title} width=\"300\" />\n        </Thumb>\n        <Content>\n          {title && (\n            <h1>\n              {title} ({releaseDate})\n            </h1>\n          )}\n          {voteAverage && (\n            <p>\n              <ScoreLabel>User score:</ScoreLabel> {voteAverage}%\n            </p>\n          )}\n\n          {overview && (\n            <p>\n              <Label>Overview</Label>\n              {overview}\n            </p>\n          )}\n\n          {genresStr && (\n            <p>\n              <Label>Genres</Label>\n              {genresStr}\n            </p>\n          )}\n        </Content>\n      </DetailWrapper>\n      <LinkList>\n        <li>\n          <StyledLink to=\"cast\" state={{ from: backLink }}>\n            Cast\n          </StyledLink>\n        </li>\n        <li>\n          <StyledLink to=\"reviews\" state={{ from: backLink }}>\n            Reviews\n          </StyledLink>\n        </li>\n      </LinkList>\n      <Outlet />\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["DetailWrapper","styled","Label","ScoreLabel","IconArrowLeft","CgArrowLeftR","BackLink","Link","Thumb","Content","LinkList","StyledLink","NavLink","useState","movieDetails","setMovieDetails","loading","setLoading","params","useParams","location","useLocation","useEffect","getMovieDetails","movieId","then","finally","Loader","poster_path","title","release_date","vote_average","overview","genres","imgUrl","noPoster","releaseDate","slice","voteAverage","Math","floor","genresStr","map","genre","name","join","backLink","state","from","Container","to","src","alt","width"],"sourceRoot":""}